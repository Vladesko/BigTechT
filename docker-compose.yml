services:

  #-----------------------------api---------------------------------
  api:
    container_name: api
    image: api
    networks:
      - app
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5000
      - "ConnectionStrings__PostgreSQL=Server=postgresdb;Port=5432;Database=Product;User Id=postgres;Password=postgres;"
      - "OTLP_ENDPOINT_URL=http://jaeger:4317/"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
      - "ConnectionStrings__Redis=redis:6379"
    depends_on:
      - postgresdb
      - redis
      - elasticsearch
      - jaeger
    ports:
      - "5000:5000"

  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html elasticSearch
  elasticsearch:
    image: docker.io/library/elasticsearch:8.10.2
    container_name: elasticsearch
    networks:
      - app
    environment:
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
  

  # https://www.elastic.co/guide/en/kibana/current/docker.html  kibana
  kibana:
    image: docker.io/library/kibana:8.10.2
    container_name: kibana
    networks:
      - app
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  #---------------------------------jaeger----------------------------------------
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    networks:
      - app
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
      - "4317:4317"
      - "4318:4318"
  #--------------------------postgres---------------------
  postgresdb:
    image: postgres
    container_name: postgresdb
    networks:
      - app
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=Product
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
  
  postgres_exporter:
    networks:
      - app
    container_name: postgres_exporter
    image: wrouesnel/postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgresdb:5432/Product?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgresdb
  pgadmin:
    container_name: pgadmin
    networks:
      - app
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.ru 
      - PGADMIN_DEFAULT_PASSWORD=admin
    restart: always
    ports:
      - "5050:80"
  
  #--------------------------------------redis-----------------------
  redis:
    image: redis:7
    networks: 
      - app
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
  
  #--------------------------------------prometheus---------------------------------
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    networks:
     - app
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    
  #--------------------------------grafana------------------------------------
  grafana:
    container_name: grafana
    ports:
      - "3000:3000"
    image: grafana/grafana
    networks:
      - app
    volumes:
      - grafana_storage:/var/lib/grafana

  #-----------------------portainer--------------------
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    networks:
      - app
    ports:
      - "8081:8000"
      - "9091:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  elasticsearch-data:  
  postgres_data:
  prometheus-data:
  grafana_storage:
  portainer_data:

networks:
  app:
    driver: "bridge"

# services:
#   postgresdb:
#     image: postgres
#     container_name: postgresdb
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#       - POSTGRES_DB=Product
#     restart: always
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data/


# volumes:
#   postgres_data: